import epdtwitter
q = epdtwitter.Incident.query.all()
# OUT: 2013-10-07 17:12:38,344 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
# OUT: 2013-10-07 17:12:38,345 INFO sqlalchemy.engine.base.Engine SELECT incident.id AS incident_id, incident.poresp AS incident_poresp, incident.description AS incident_description, incident.ofc AS incident_ofc, incident.timerec AS incident_timerec, incident.location AS incident_location, incident."eventNum" AS "incident_eventNum", incident.priority AS incident_priority, incident."caseNo" AS "incident_caseNo" 
# OUT: FROM incident
# OUT: 2013-10-07 17:12:38,345 INFO sqlalchemy.engine.base.Engine ()
q
# OUT: [<Incident 100487>, <Incident 100489>, <Incident 100492>, <Incident 100493>, <Incident 100494>, <Incident 100498>, <Incident 100500>, <Incident 100502>]
q = epdtwitter.Incident.id.contains("100487")

q
# OUT: <sqlalchemy.sql.expression.BinaryExpression object at 0x10d34ce10>
type(q)
# OUT: <class 'sqlalchemy.sql.expression.BinaryExpression'>
help(q)
q = epdtwitter.Incident.query.filter_by(id='100487')

q
# OUT: <sqlalchemy.orm.query.Query object at 0x10d34ca50>
q.id
# OUT: Traceback (most recent call last):
# OUT:   File "<input>", line 1, in <module>
# OUT: AttributeError: 'Query' object has no attribute 'id'
q = epdtwitter.Incident.query.filter_by(id='100487').first()
# OUT: 2013-10-07 17:16:32,187 INFO sqlalchemy.engine.base.Engine SELECT incident.id AS incident_id, incident.poresp AS incident_poresp, incident.description AS incident_description, incident.ofc AS incident_ofc, incident.timerec AS incident_timerec, incident.location AS incident_location, incident."eventNum" AS "incident_eventNum", incident.priority AS incident_priority, incident."caseNo" AS "incident_caseNo" 
# OUT: FROM incident 
# OUT: WHERE incident.id = ?
# OUT:  LIMIT ? OFFSET ?
# OUT: 2013-10-07 17:16:32,196 INFO sqlalchemy.engine.base.Engine ('100487', 1, 0)
q.id
# OUT: 100487
q.timerec
# OUT: datetime.datetime(2013, 10, 7, 16, 10, 3)
